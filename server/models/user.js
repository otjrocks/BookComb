const mongoose = require('mongoose'); 
const Schema = mongoose.Schema; 
const passportLocalMongoose = require('passport-local-mongoose'); 
const validator = require('validator');
  
  
const UserSchema = new Schema({    
    email: {
        type: String, 
        required: [true, 'A valid email is required.'], 
        unique: [true, 'This email is already associated with an account.'],
        validate: {
            validator: validator.isEmail,
            message: '{VALUE} is not a valid email',
            isAsync: false
        }
    }, 
    username: {
        type: String, 
        unique: [true, 'This username is already taken.'],
        match: [/^[a-zA-Z0-9]+$/, 'Your username cannot contain special characters'], // This regex allows only alphanumeric characters
        required: true
    }, 
    resetPasswordToken: { type: String, },
    resetPasswordExpires: { type: Date, },
    // no password needed automatically generated by passport local mongoose plugin
    // the plugin also handles hashing and creating of the field
}); 
  
// plugin for passport-local-mongoose 
UserSchema.plugin(passportLocalMongoose, {
    usernameField: 'email',  // This tells passport-local-mongoose to use 'email' instead of 'username'
}); 


module.exports = mongoose.model("User", UserSchema); 